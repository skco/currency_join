[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\skco\AppData\Local\Temp\1\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\skco\AppData\Local\Temp\1\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 1.8.0_362)
[debug]       Load.loadUnit: plugins took 184.856201ms
[debug]       Load.loadUnit: defsScala took 0.9136ms
[debug] [Loading] Scanning directory C:\Users\skco\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\skco\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 25.696801 ms
[debug]           Load.resolveProject(global-plugins) took 82.8477ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\skco\.sbt\1.0\plugins, plugins: List(<none>))) took 159.9182ms
[debug] [Loading] Done in C:\Users\skco\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 208.8419ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3491ms
[debug]     Load.loadUnit(file:/C:/Users/skco/.sbt/1.0/plugins/, ...) took 408.8583ms
[debug]   Load.apply: load took 856.9749ms
[debug]   Load.apply: resolveProjects took 11.959ms
[debug]   Load.apply: finalTransforms took 104.9912ms
[debug]   Load.apply: config.delegates took 10.867501ms
[debug]   Load.apply: Def.make(settings)... took 756.090001ms
[debug]   Load.apply: structureIndex took 198.603599ms
[debug]   Load.apply: mkStreams took 2.745701ms
[info] loading global plugins from C:\Users\skco\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3854.158901ms
[debug]           Load.loadUnit: plugins took 53.7539ms
[debug]           Load.loadUnit: defsScala took 0.006499ms
[debug] [Loading] Scanning directory C:\Users\skco\Desktop\audnzd_join\project
[debug]             Load.loadUnit: mkEval took 12.501201ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\skco\Desktop\audnzd_join\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.3558 ms
[info] loading settings for project audnzd_join-build from idea.sbt ...
[debug]               Load.resolveProject(audnzd_join-build) took 10.663ms
[debug]             Load.loadTransitive: finalizeProject(Project(id audnzd_join-build, base: C:\Users\skco\Desktop\audnzd_join\project, plugins: List(<none>))) took 16.4645ms
[debug] [Loading] Done in C:\Users\skco\Desktop\audnzd_join\project, returning: (audnzd_join-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3530.7892ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.8702ms
[debug]         Load.loadUnit(file:/C:/Users/skco/Desktop/audnzd_join/project/, ...) took 3596.8892ms
[debug]       Load.apply: load took 3599.076ms
[debug]       Load.apply: resolveProjects took 0.239499ms
[debug]       Load.apply: finalTransforms took 20.379ms
[debug]       Load.apply: config.delegates took 2.660799ms
[debug]       Load.apply: Def.make(settings)... took 157.429201ms
[debug]       Load.apply: structureIndex took 50.6038ms
[debug]       Load.apply: mkStreams took 0.0033ms
[info] loading project definition from C:\Users\skco\Desktop\audnzd_join\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5659.1239ms
[debug]     Load.loadUnit: defsScala took 0.005599ms
[debug] [Loading] Scanning directory C:\Users\skco\Desktop\audnzd_join
[debug]       Load.loadUnit: mkEval took 0.428ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\skco\Desktop\audnzd_join, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.1433 ms
[info] loading settings for project audnzd_join from build.sbt ...
[debug]         Load.resolveProject(audnzd_join) took 49.334899ms
[debug]       Load.loadTransitive: finalizeProject(Project(id audnzd_join, base: C:\Users\skco\Desktop\audnzd_join, plugins: List(<none>))) took 55.915499ms
[debug] [Loading] Done in C:\Users\skco\Desktop\audnzd_join, returning: (audnzd_join)
[debug]     Load.loadUnit: loadedProjectsRaw took 1868.508701ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.6441ms
[debug]   Load.loadUnit(file:/C:/Users/skco/Desktop/audnzd_join/, ...) took 7538.282401ms
[debug] Load.apply: load took 7540.135701ms
[debug] Load.apply: resolveProjects took 0.139799ms
[debug] Load.apply: finalTransforms took 36.7988ms
[debug] Load.apply: config.delegates took 0.3715ms
[debug] Load.apply: Def.make(settings)... took 87.286499ms
[debug] Load.apply: structureIndex took 43.202001ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to audnzd_join (in build file:/C:/Users/skco/Desktop/audnzd_join/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55220 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55220, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to audnzd_join (in build file:/C:/Users/skco/Desktop/audnzd_join/)
[debug] > Exec(idea-shell, None, None)
